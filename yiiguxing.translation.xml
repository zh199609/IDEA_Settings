<application>
  <component name="AppStorage">
    <histories>
      <item value="Spring's central class for synchronous client-side HTTP access. It simplifies communication with HTTP servers, and enforces RESTful principles. It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results. Note: by default the RestTemplate relies on standard JDK facilities to establish HTTP connections. You can switch to use a different HTTP library such as Apache HttpComponents, Netty, and OkHttp through the setRequestFactory property. The main entry points of this template are the methods named after the six main HTTP methods:" />
      <item value="Returns whether any elements of this stream match the provided predicate. May not evaluate the predicate on all elements if not necessary for determining the result. If the stream is empty then false is returned and the predicate is not evaluated." />
      <item value="Invoking the beforeTestMethod method on PowerMock test listener org.powermock.api.extension.listener.AnnotationEnabler@4f8969b0 failed." />
      <item value="nvoking the beforeTestMethod method on PowerMock test listener org.powermock.api.extension.listener.AnnotationEnabler@11acdc30 failed" />
      <item value="Class Not Prepared Exception" />
      <item value="If you're unsure why you're getting above error read on. Due to the nature of the syntax above problem might occur because: 1. This exception might occur in wrongly written multi-threaded tests. Please refer to Mockito FAQ on limitations of concurrency testing. 2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method." />
      <item value="eturns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null ? e==null : o.equals(e)). Params: o – element whose presence in this list is to be tested Returns: true if this list contains the specified element" />
      <item value="Default is true, leading to an exception thrown in case there is no body content. Switch this to false if you prefer null to be passed when the body content is nul" />
      <item value="The value is optional and represents an order value as defined in the Ordered interface. Lower values have higher priority. The default value is Ordered.LOWEST_PRECEDENCE, indicating lowest priority (losing to any other specified order value)." />
      <item value="Consult the Javadoc for OrderComparator for details on the sort semantics for non-ordered objects." />
      <item value="Annotation-based ordering is supported for specific kinds of components only — for example, for annotation-based AspectJ aspects. Ordering strategies within the Spring container, on the other hand, are typically based on the Ordered interface in order to allow for programmatically configurable ordering of each instance." />
      <item value="Since Spring 4.1, the standard javax.annotation.Priority annotation can be used as a drop-in replacement for this annotation." />
      <item value="Integration team" />
      <item value="Record" />
      <item value="permission" />
      <item value="onverts a JavaScript Object Notation (JSON) string into an object." />
      <item value="Converts a JavaScript value to a JavaScript Object Notation (JSON) string." />
      <item value="invalid comparison" />
      <item value="present" />
      <item value="Required Proposal parameter 'proposal' is not present" />
      <item value="PROTECTION" />
      <item value="SUPERVISOR" />
      <item value="Ambiguous" />
      <item value="Conversion failed when converting date andor time from character string." />
      <item value="IMPLIED" />
      <item value="Illegal Argument Exception" />
      <item value="Incorrect syntax" />
      <item value="No Such Property Exception" />
      <item value="RequestHeader, ResponseBody, org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter, org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
      <item value="Annotation indicating a method parameter should be bound to the body of the web request. The body of the request is passed through an HttpMessageConverter to resolve the method argument depending on the content type of the request. Optionally, automatic validation can be applied by annotating the argument with @Valid. Supported for annotated handler methods in Servlet environments." />
      <item value="Property or field 'name' cannot be found on null" />
      <item value="no further information" />
      <item value="Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect" />
      <item value="Whether body content is required. Default is true, leading to an exception thrown in case there is no body content. Switch this to false if you prefer null to be passed when the body content is null." />
      <item value="See Also: RequestHeader, ResponseBody, org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter, org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter Author: Arjen Poutsma" />
      <item value="Add an attribute to the model. Params: attributeName – name of the object to add to the model attributeValue – object to add to the model (never null)" />
      <item value="Execute the given task. The call might return immediately if the implementation uses an asynchronous execution strategy, or might block in the case of synchronous execution. Params: task – the Runnable to execute (never null) Throws: TaskRejectedException – if the given task was not accepted" />
      <item value="Simple task executor interface that abstracts the execution of a Runnable. Implementations can use all sorts of different execution strategies, such as: synchronous, asynchronous, using a thread pool, and more. Equivalent to JDK 1.5's Executor interface; extending it now in Spring 3.0, so that clients may declare a dependency on an Executor and receive any TaskExecutor implementation. This interface remains separate from the standard Executor interface mainly for backwards compatibility with JDK 1.4 in Spring 2.x." />
      <item value="InheritableThreadLocal values pertaining to this thread. This map is maintained by the InheritableThreadLocal class." />
      <item value="ThreadLocal values pertaining to this thread. This map is maintained by the ThreadLocal class." />
      <item value="Constructs a request object wrapping the given request." />
      <item value="Name of the HttpServletRequest attribute that contains the best matching pattern within the handler mapping. Note: This attribute is not required to be supported by all HandlerMapping implementations. URL-based HandlerMappings will typically support it, but handlers should not necessarily expect this request attribute to be present in all scenarios." />
      <item value="Constructs a FileWriter object given a file name. Params: fileName – String The system-dependent filename. Throws: IOException – if the named file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason" />
      <item value="rams: fileName – String The system-dependent filename. append – boolean if true, then data will be written to the end of the file rather than the beginning. Throws: IOException – if the named file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason" />
      <item value="Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written." />
      <item value="ould not discover the dialect to use. java.sql.SQLException: NamingException while looking up DataSource: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file: java.naming.factory.initial" />
      <item value="Constructs an UnsupportedOperationException with the specified detail message. Params: message – the detail message" />
      <item value="Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written. Params: fileName – String The system-dependent filename. append – boolean if true, then data will be written to the end of the file rather than the beginning. Throws: IOException – if the named file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason" />
      <item value="Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between &quot;computer time&quot; and coordinated universal time (UTC). Returns: the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC. See Also: java.util.Date" />
      <item value="NamingException while looking up DataSource: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file: java.naming.factory.initial" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="94" />
        <entry key="ENGLISH" value="95" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1639986313535" />
  </component>
</application>